"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var qs_1 = __importDefault(require("qs"));
var body_scroll_lock_1 = require("body-scroll-lock");
var generateCSS_1 = __importDefault(require("./generateCSS"));
var ModalContext_1 = __importDefault(require("../ModalContext"));
var getSearchQuery = function () {
    var query = qs_1.default.parse(window.location.search, { ignoreQueryPrefix: true });
    return query;
};
var getModalParam = function () {
    var searchQuery = getSearchQuery();
    return searchQuery.modal || '';
};
var ModalProvider = function (props) {
    var classPrefix = props.classPrefix, _a = props.minifyCSS, minifyCSS = _a === void 0 ? true : _a, _b = props.generateCSS, shouldGenerateCSS = _b === void 0 ? true : _b, _c = props.zIndex, zIndex = _c === void 0 ? 9999 : _c, handleParamChange = props.handleParamChange, children = props.children, _d = props.transTime, transTime = _d === void 0 ? 250 : _d;
    var containerRef = (0, react_1.useRef)(null);
    var _e = (0, react_1.useState)(''), currentModal = _e[0], setCurrentModal = _e[1];
    var _f = (0, react_1.useState)(false), oneIsOpen = _f[0], setOneIsOpen = _f[1];
    var _g = (0, react_1.useState)(false), closeOnBlur = _g[0], setCloseOnBlur = _g[1];
    var _h = (0, react_1.useState)(false), bodyScrollIsLocked = _h[0], setBodyScrollIsLocked = _h[1];
    var _j = (0, react_1.useState)(''), cssString = _j[0], setCSSString = _j[1];
    var closeAll = (0, react_1.useCallback)(function (updateHistory) {
        if (updateHistory === void 0) { updateHistory = true; }
        if (updateHistory) {
            if (typeof handleParamChange === 'function') {
                handleParamChange({
                    key: 'modal',
                    value: '',
                });
            }
            if (typeof handleParamChange === 'boolean' && handleParamChange) {
                var searchQuery = getSearchQuery();
                delete searchQuery.modal;
                var queryWithoutModal = qs_1.default.stringify(searchQuery, { addQueryPrefix: true });
                var newURL = "".concat(window.location.pathname).concat(queryWithoutModal);
                window.history.pushState({}, '', newURL);
            }
        }
        (0, body_scroll_lock_1.clearAllBodyScrollLocks)();
        setCurrentModal('');
        setOneIsOpen(false);
    }, [handleParamChange]);
    var bindEsc = (0, react_1.useCallback)(function (e) {
        if (e.keyCode === 27)
            closeAll();
    }, [closeAll]);
    (0, react_1.useEffect)(function () {
        document.addEventListener('keydown', function (e) { return bindEsc(e); }, false);
        setCurrentModal(getModalParam());
        return function () { return document.removeEventListener('keydown', function (e) { return bindEsc(e); }, false); };
    }, [bindEsc]);
    (0, react_1.useEffect)(function () {
        if (shouldGenerateCSS) {
            var newString = '';
            newString = (0, generateCSS_1.default)({
                classPrefix: classPrefix,
                zIndex: zIndex
            });
            if (minifyCSS)
                newString = newString.replace(/\n/g, '').replace(/\s\s+/g, ' ');
            setCSSString(newString);
        }
    }, [
        shouldGenerateCSS,
        minifyCSS,
        zIndex,
        classPrefix
    ]);
    var open = (0, react_1.useCallback)(function (slug, skipParamChange) {
        if (!skipParamChange) {
            if (typeof handleParamChange === 'function') {
                handleParamChange({
                    key: 'modal',
                    value: slug,
                });
            }
            if (typeof handleParamChange === 'boolean' && handleParamChange) {
                var searchQuery = getSearchQuery();
                searchQuery.modal = slug;
                var queryWithModal = qs_1.default.stringify(searchQuery, { addQueryPrefix: true });
                var newURL = "".concat(window.location.pathname).concat(queryWithModal);
                window.history.pushState({}, '', newURL);
            }
        }
        setCurrentModal(slug);
        setOneIsOpen(true);
    }, [handleParamChange]);
    var toggle = (0, react_1.useCallback)(function (slug) {
        if (slug === currentModal)
            closeAll();
        else
            open(slug);
    }, [closeAll, open, currentModal]);
    var setBodyScrollLock = (0, react_1.useCallback)(function (shouldLock, excludingRef) {
        if (excludingRef === null || excludingRef === void 0 ? void 0 : excludingRef.current) {
            if (shouldLock) {
                (0, body_scroll_lock_1.disableBodyScroll)(excludingRef.current);
                setBodyScrollIsLocked(true);
            }
            else {
                (0, body_scroll_lock_1.enableBodyScroll)(excludingRef.current);
                setBodyScrollIsLocked(false);
            }
        }
    }, []);
    var setContainerRef = (0, react_1.useCallback)(function (ref) {
        containerRef.current = ref;
    }, []);
    var inheritedProps = __assign({}, props);
    delete inheritedProps.children;
    return (react_1.default.createElement(react_1.Fragment, null,
        shouldGenerateCSS && react_1.default.createElement("style", { dangerouslySetInnerHTML: { __html: cssString } }),
        react_1.default.createElement(ModalContext_1.default.Provider, { value: __assign(__assign({}, inheritedProps), { transTime: transTime, 
                // state
                containerRef: containerRef, currentModal: currentModal, oneIsOpen: oneIsOpen, closeOnBlur: closeOnBlur, bodyScrollIsLocked: bodyScrollIsLocked, classPrefix: classPrefix, 
                // methods
                closeAll: closeAll, setCloseOnBlur: setCloseOnBlur, open: open, toggle: toggle, setContainerRef: setContainerRef, setBodyScrollLock: setBodyScrollLock }) }, children && children)));
};
exports.default = ModalProvider;
//# sourceMappingURL=index.js.map